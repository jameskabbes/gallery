/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/users/{user_id}": {
    /** Get User By Id */
    get: operations["get_user_by_id_users__user_id__get"];
    /** Delete User */
    delete: operations["delete_user_users__user_id__delete"];
    /** Patch User */
    patch: operations["patch_user_users__user_id__patch"];
  };
  "/users/username/{username}": {
    /** Get User By Username */
    get: operations["get_user_by_username_users_username__username__get"];
  };
  "/users/": {
    /** Post User */
    post: operations["post_user_users__post"];
  };
  "/users/available/username/{username}/": {
    /** User Username Available */
    get: operations["user_username_available_users_available_username__username___get"];
  };
  "/users/available/email/{email}/": {
    /** User Username Exists */
    get: operations["user_username_exists_users_available_email__email___get"];
  };
  "/token/": {
    /** Login For Access Token */
    post: operations["login_for_access_token_token__post"];
  };
  "/pages/profile/": {
    /** Get Pages Profile */
    get: operations["get_pages_profile_pages_profile__get"];
  };
  "/pages/home/": {
    /** Get Pages Home */
    get: operations["get_pages_home_pages_home__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Body_login_for_access_token_token__post */
    Body_login_for_access_token_token__post: {
      /** Grant Type */
      grant_type?: string | null;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string | null;
      /** Client Secret */
      client_secret?: string | null;
    };
    /** DetailOnlyResponse */
    DetailOnlyResponse: {
      /** Detail */
      detail: string;
    };
    /** @enum {string} */
    EXCEPTION: "invalid_token" | "token_expired" | "missing_required_claims" | "user_not_found" | "user_not_permitted" | "credentials";
    /** GetAuthReturn */
    GetAuthReturn: {
      user?: components["schemas"]["UserPublic"] | null;
      exception?: components["schemas"]["EXCEPTION"] | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** ItemAvailableResponse */
    ItemAvailableResponse: {
      /** Available */
      available: boolean;
    };
    /** NotFoundResponse */
    NotFoundResponse: {
      /** Detail */
      detail: string;
    };
    /** PagesHomeResponse */
    PagesHomeResponse: {
      auth: components["schemas"]["GetAuthReturn"];
    };
    /** PagesProfileResponse */
    PagesProfileResponse: {
      auth: components["schemas"]["GetAuthReturn"];
      user: components["schemas"]["UserPrivate"];
    };
    /** Token */
    Token: {
      /** Access Token */
      access_token: string;
      /** Token Type */
      token_type: string;
    };
    /** TokenResponse */
    TokenResponse: {
      auth: components["schemas"]["GetAuthReturn"];
      token: components["schemas"]["Token"];
    };
    /** UserCreate */
    UserCreate: {
      /** Username */
      username: string;
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Password */
      password: string;
    };
    /** UserPrivate */
    UserPrivate: {
      /** Id */
      id: string;
      /** Username */
      username: string;
      /**
       * Email
       * Format: email
       */
      email: string;
    };
    /** UserPublic */
    UserPublic: {
      /** Id */
      id: string;
      /** Username */
      username: string;
    };
    /** UserUpdate */
    UserUpdate: {
      /** Username */
      username?: string | null;
      /** Email */
      email?: string | null;
      /** Password */
      password?: string | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Get User By Id */
  get_user_by_id_users__user_id__get: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
      /** @description User not found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete User */
  delete_user_users__user_id__delete: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description User not found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Patch User */
  patch_user_users__user_id__patch: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
      /** @description User not found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get User By Username */
  get_user_by_username_users_username__username__get: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
      /** @description User not found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Post User */
  post_user_users__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPrivate"];
        };
      };
      /** @description User already exists */
      409: {
        content: {
          "application/json": components["schemas"]["DetailOnlyResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** User Username Available */
  user_username_available_users_available_username__username___get: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ItemAvailableResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** User Username Exists */
  user_username_exists_users_available_email__email___get: {
    parameters: {
      path: {
        email: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ItemAvailableResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Login For Access Token */
  login_for_access_token_token__post: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_login_for_access_token_token__post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TokenResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Pages Profile */
  get_pages_profile_pages_profile__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PagesProfileResponse"];
        };
      };
    };
  };
  /** Get Pages Home */
  get_pages_home_pages_home__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PagesHomeResponse"];
        };
      };
    };
  };
}
